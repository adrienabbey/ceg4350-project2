<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://bit.csc.lsu.edu/tutorial/ten-commandments/pikestyle.html -->
<HTML><HEAD><TITLE>Rob Pike: Notes on Programming in C</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252"><LINK 
href="mailto://varg.lysator.liu.se/c/jutta@cs.tu-berlin.de" rel=made>
<META content="MSHTML 6.00.2712.300" name=GENERATOR></HEAD>
<BODY>
<H1>Notes on Programming in C</H1><A 
href="http://bit.csc.lsu.edu/tutorial/ten-commandments/rob/index.html">Rob 
Pike</A> <BR>February 21, 1989 
<H2>Introduction</H2>Kernighan and Plauger's <A 
href="http://bit.csc.lsu.edu/tutorial/ten-commandments/c-faq/index.html#EoPS">The 
Elements of Programming Style</A> was an important and rightly influential 
book.<TT></TT>But sometimes I feel its concise rules were taken as a cookbook 
approach to good style instead of the succinct expression of a philosophy they 
were meant to be.<TT></TT>If the book claims that variable names should be 
chosen meaningfully, doesn't it then follow that variables whose names are small 
essays on their use are even better?<TT></TT>Isn't 
<CODE>MaximumValueUntilOverflow</CODE> a better name than 
<CODE>maxval</CODE>?<TT></TT>I don't think so.
<P>What follows is a set of short essays that collectively encourage a 
philosophy of clarity in programming rather than giving hard rules.<TT></TT>I 
don't expect you to agree with all of them, because they are opinion and 
opinions change with the times.<TT></TT>But they've been accumulating in my 
head, if not on paper until now, for a long time, and are based on a lot of 
experience, so I hope they help you understand how to plan the details of a 
program.<TT></TT>(I've yet to see a good essay on how to plan the whole thing, 
but then that's partly what this course is about.)<TT></TT>If you find them 
idiosyncratic, fine; if you disagree with them, fine; but if they make you think 
about why you disagree, that's better.<TT></TT>Under no circumstances should you 
program the way I say to because I say to; program the way you think expresses 
best what you're trying to accomplish in the program.<TT></TT>And do so 
consistently and ruthlessly.
<P>Your comments are welcome.
<P>
<H2>Issues of typography</H2>A program is a sort of publication.<TT></TT>It's 
meant to be read by the programmer, another programmer (perhaps yourself a few 
days, weeks or years later), and lastly a machine.<TT></TT> The machine doesn't 
care how pretty the program is - if the program compiles, the machine's happy - 
but people do, and they should.<TT></TT>Sometimes they care too much: pretty 
printers mechanically produce pretty output that accentuates irrelevant detail 
in the program, which is <B>as</B> sensible <B>as</B> putting all the 
prepositions <B>in</B> English text <B>in</B> bold font.<TT></TT> Although many 
people think programs should look like the Algol-68 report (and some systems 
even require you to edit programs in that style), a clear program is not made 
any clearer by such presentation, and a bad program is only made laughable.
<P>Typographic conventions consistently held are important to clear 
presentation, of course - indentation is probably the best known and most useful 
example - but when the ink obscures the intent, typography has taken 
over.<TT></TT>So even if you stick with plain old typewriter-like output, be 
conscious of typographic silliness.<TT></TT>Avoid decoration; for instance, keep 
comments brief and banner-free.<TT></TT>Say what you want to say in the program, 
neatly and consistently.<TT></TT>Then move on.
<P>
<H2>Variable names</H2>Ah, variable names.<TT></TT>Length is not a virtue in a 
name; clarity of expression <EM>is</EM>.<TT></TT>A global variable rarely used 
may deserve a long name, <CODE>maxphysaddr</CODE> say.<TT></TT>An array index 
used on every line of a loop needn't be named any more elaborately than 
<CODE>i</CODE>.<TT></TT>Saying <CODE>index</CODE> or <CODE>elementnumber</CODE> 
is more to type (or calls upon your text editor) and obscures the details of the 
computation.<TT></TT>When the variable names are huge, it's harder to see what's 
going on.<TT></TT>This is partly a typographic issue; consider <PRE>        for(i=0 to 100)
                array[i]=0
</PRE><I>vs</I>. <PRE>        for(elementnumber=0 to 100)
                array[elementnumber]=0;
</PRE>The problem gets worse fast with real examples.<TT></TT>Indices are just 
notation, so treat them as such.
<P>Pointers also require sensible notation.<TT></TT>np is just as mnemonic as 
nodepointer <EM>if</EM> you consistently use a naming convention from which np 
means ``node pointer'' is easily derived.<TT></TT>More on this in the next 
essay.
<P>As in all other aspects of readable programming, consistency is important in 
naming.<TT></TT>If you call one variable maxphysaddr, don't call its cousin 
lowestaddress.
<P>Finally, I prefer minimum-length but maximum-information names, and then let 
the context fill in the rest.<TT></TT>Globals, for instance, typically have 
little context when they are used, so their names need to be relatively 
evocative.<TT></TT>Thus I say maxphysaddr (not MaximumPhysicalAddress) for a 
global variable, but np not NodePointer for a pointer locally defined and 
used.<TT></TT>This is largely a matter of taste, but taste is relevant to 
clarity.
<P>I eschew embedded capital letters in names; to my prose-oriented eyes, they 
are too awkward to read comfortably.<TT></TT>They jangle like bad typography.
<P>
<H2>The use of pointers.</H2>C is unusual in that it allows pointers to point to 
anything.<TT></TT>Pointers are sharp tools, and like any such tool, used well 
they can be delightfully productive, but used badly they can do great damage (I 
sunk a wood chisel into my thumb a few days before writing 
this).<TT></TT>Pointers have a bad reputation in academia, because they are 
considered too dangerous, dirty somehow.<TT></TT>But I think they are powerful 
<EM>notation</EM>, which means they can help us express ourselves clearly.
<P>Consider: When you have a pointer to an object, it is a name for exactly that 
object and no other.<TT></TT>That sounds trivial, but look at the following two 
expressions: <PRE>        np
        node[i]
</PRE>The first points to a node, the second evaluates to (say) the same 
node.<TT></TT>But the second form is an expression; it is not so 
simple.<TT></TT>To interpret it, we must know what <CODE>node</CODE> is, what 
<CODE>i</CODE> is, and that <CODE>i</CODE> and node are related by the (probably 
unspecified) rules of the surrounding program.<TT></TT>Nothing about the 
expression in isolation can show that i is a valid index of node, let alone the 
index of the element we want.<TT></TT> If <CODE>i</CODE> and <CODE>j</CODE> and 
<CODE>k</CODE> are all indices into the node array, it's very easy to slip up, 
and the compiler cannot help.<TT></TT>It's particularly easy to make mistakes 
when passing things to subroutines: a pointer is a single thing; an array and an 
index must be believed to belong together in the receiving subroutine.
<P>An expression that evaluates to an object is inherently more subtle and 
error-prone than the address of that object.<TT></TT> Correct use of pointers 
can simplify code: <PRE>        parent-&gt;link[i].type</PRE><I>vs.</I> <PRE>	lp-&gt;type.
</PRE>If we want the next element's type, it's <PRE>        parent-&gt;link[++i].type
</PRE>or <PRE>        (++lp)-&gt;type.
</PRE><CODE>i</CODE> advances but the rest of the expression must stay constant; 
with pointers, there's only one thing to advance.
<P>Typographic considerations enter here, too.<TT></TT>Stepping through 
structures using pointers can be much easier to read than with expressions: less 
ink is needed and less effort is expended by the compiler and 
computer.<TT></TT>A related issue is that the type of the pointer affects how it 
can be used correctly, which allows some helpful compile-time error checking 
that array indices cannot share.<TT></TT>Also, if the objects are structures, 
their tag fields are reminders of their type, so <PRE>             np-&gt;left
</PRE>is sufficiently evocative; if an array is being indexed the array will 
have some well-chosen name and the expression will end up longer: <PRE>             node[i].left.
</PRE>Again, the extra characters become more irritating as the examples become 
larger.
<P>As a rule, if you find code containing many similar, complex expressions that 
evaluate to elements of a data structure, judicious use of pointers can clear 
things up.<TT></TT> Consider what <PRE>        if(goleft)
             p-&gt;left=p-&gt;right-&gt;left;
        else
             p-&gt;right=p-&gt;left-&gt;right;
</PRE>would look like using a compound expression for <CODE>p</CODE>.<TT></TT> 
Sometimes it's worth a temporary variable (here <CODE>p</CODE>) or a macro to 
distill the calculation. 
<H2>Procedure names</H2>Procedure names should reflect what they do; function 
names should reflect what they <EM>return</EM>.<TT></TT>Functions are used in 
expressions, often in things like if's, so they need to read appropriately. <PRE>        if(checksize(x))
</PRE>is unhelpful because we can't deduce whether checksize returns true on 
error or non-error; instead <PRE>        if(validsize(x))
</PRE>makes the point clear and makes a future mistake in using the routine less 
likely. 
<H2>Comments</H2>A delicate matter, requiring taste and judgement.<TT></TT>I 
tend to err on the side of eliminating comments, for several 
reasons.<TT></TT>First, if the code is clear, and uses good type names and 
variable names, it should explain itself.<TT></TT>Second, comments aren't 
checked by the compiler, so there is no guarantee they're right, especially 
after the code is modified.<TT></TT>A misleading comment can be very 
confusing.<TT></TT>Third, the issue of typography: comments clutter code.
<P>But I do comment sometimes.<TT></TT>Almost exclusively, I use them as an 
introduction to what follows.<TT></TT>Examples: explaining the use of global 
variables and types (the one thing I always comment in large programs); as an 
introduction to an unusual or critical procedure; or to mark off sections of a 
large computation.
<P>There is a famously bad comment style: <PRE>        i=i+1;           /* Add one to i */
</PRE>and there are worse ways to do it: <PRE>        /**********************************
         *                                *
         *          Add one to i          *
         *                                *
         **********************************/

                       i=i+1;
</PRE>Don't laugh now, wait until you see it in real life.
<P>Avoid cute typography in comments, avoid big blocks of comments except 
perhaps before vital sections like the declaration of the central data structure 
(comments on data are usually much more helpful than on algorithms); basically, 
avoid comments.<TT></TT>If your code needs a comment to be understood, it would 
be better to rewrite it so it's easier to understand.<TT></TT>Which brings us to 

<H2>Complexity</H2>Most programs are too complicated - that is, more complex 
than they need to be to solve their problems efficiently.<TT></TT>Why? Mostly 
it's because of bad design, but I will skip that issue here because it's a big 
one.<TT></TT>But programs are often complicated at the microscopic level, and 
that is something I can address here.
<P>Rule 1.<TT></TT>You can't tell where a program is going to spend its 
time.<TT></TT>Bottlenecks occur in surprising places, so don't try to second 
guess and put in a speed hack until you've proven that's where the bottleneck 
is.
<P>Rule 2.<TT></TT>Measure.<TT></TT>Don't tune for speed until you've measured, 
and even then don't unless one part of the code <EM>overwhelms</EM> the rest.
<P>Rule 3.<TT></TT>Fancy algorithms are slow when <I>n</I> is small, and 
<I>n</I> is usually small.<TT></TT>Fancy algorithms have big constants. Until 
you know that <I>n</I> is frequently going to be big, don't get 
fancy.<TT></TT>(Even if <I>n</I> does get big, use Rule 2 first.) <TT></TT>For 
example, binary trees are always faster than splay trees for workaday problems.
<P>Rule 4.<TT></TT>Fancy algorithms are buggier than simple ones, and they're 
much harder to implement.<TT></TT>Use simple algorithms as well as simple data 
structures.
<P>The following data structures are a complete list for almost all practical 
programs: 
<UL>
  <LI>array 
  <LI>linked list 
  <LI>hash table 
  <LI>binary tree</LI></UL>Of course, you must also be prepared to collect these 
into compound data structures.<TT></TT>For instance, a symbol table might be 
implemented as a hash table containing linked lists of arrays of characters.
<P>Rule 5.<TT></TT>Data dominates.<TT></TT>If you've chosen the right data 
structures and organized things well, the algorithms will almost always be 
self-evident.<TT></TT>Data structures, not algorithms, are central to 
programming.<TT></TT>(See Brooks p. 102.)
<P>Rule 6.<TT></TT>There is no Rule 6. 
<H2>Programming with data.</H2>Algorithms, or details of algorithms, can often 
be encoded compactly, efficiently and expressively as data rather than, say, as 
lots of if statements.<TT></TT>The reason is that the <EM>complexity</EM> of the 
job at hand, if it is due to a combination of independent details, <EM>can be 
encoded</EM>.<TT></TT>A classic example of this is parsing tables, which encode 
the grammar of a programming language in a form interpretable by a fixed, fairly 
simple piece of code.<TT></TT>Finite state machines are particularly amenable to 
this form of attack, but almost any program that involves the `parsing' of some 
abstract sort of input into a sequence of some independent `actions' can be 
constructed profitably as a data-driven algorithm.
<P>Perhaps the most intriguing aspect of this kind of design is that the tables 
can sometimes be generated by another program - a parser generator, in the 
classical case. As a more earthy example, if an operating system is driven by a 
set of tables that connect I/O requests to the appropriate device drivers, the 
system may be `configured' by a program that reads a description of the 
particular devices connected to the machine in question and prints the 
corresponding tables.
<P>One of the reasons data-driven programs are not common, at least among 
beginners, is the tyranny of Pascal.<TT></TT>Pascal, like its creator, believes 
firmly in the separation of code and data.<TT></TT>It therefore (at least in its 
original form) has no ability to create initialized data.<TT></TT>This flies in 
the face of the theories of Turing and von Neumann, which define the basic 
principles of the stored-program computer.<TT></TT>Code and data <EM>are</EM> 
the same, or at least they can be.<TT></TT>How else can you explain how a 
compiler works? (Functional languages have a similar problem with I/O.) 
<H2>Function pointers</H2>Another result of the tyranny of Pascal is that 
beginners don't use function pointers.<TT></TT>(You can't have function-valued 
variables in Pascal.) Using function pointers to encode complexity has some 
interesting properties.
<P>Some of the complexity is passed to the routine pointed to.<TT></TT>The 
routine must obey some standard protocol - it's one of a set of routines invoked 
identically - but beyond that, what it does is its business alone.<TT></TT>The 
complexity is <EM>distributed</EM>.
<P>There is this idea of a protocol, in that all functions used similarly must 
behave similarly.<TT></TT>This makes for easy documentation, testing, growth and 
even making the program run distributed over a network - the protocol can be 
encoded as remote procedure calls.
<P>I argue that clear use of function pointers is the heart of object-oriented 
programming.<TT></TT>Given a set of operations you want to perform on data, and 
a set of data types you want to respond to those operations, the easiest way to 
put the program together is with a group of function pointers for each 
type.<TT></TT>This, in a nutshell, defines class and method.<TT></TT>The O-O 
languages give you more of course - prettier syntax, derived types and so on - 
but conceptually they provide little extra.
<P>Combining data-driven programs with function pointers leads to an 
astonishingly expressive way of working, a way that, in my experience, has often 
led to pleasant surprises. Even without a special O-O language, you can get 90% 
of the benefit for no extra work and be more in control of the result.<TT></TT>I 
cannot recommend an implementation style more highly.<TT></TT>All the programs I 
have organized this way have survived comfortably after much development - far 
better than with less disciplined approaches.<TT></TT>Maybe that's it: the 
discipline it forces pays off handsomely in the long run. 
<H2>Include files</H2>Simple rule: include files should never include include 
files.<TT></TT>If instead they state (in comments or implicitly) what files they 
need to have included first, the problem of deciding which files to include is 
pushed to the user (programmer) but in a way that's easy to handle and that, by 
construction, avoids multiple inclusions.<TT></TT>Multiple inclusions are a bane 
of systems programming.<TT></TT>It's not rare to have files included five or 
more times to compile a single C source file.<TT></TT>The Unix /usr/include/sys 
stuff is terrible this way.
<P>There's a little dance involving #ifdef's that can prevent a file being read 
twice, but it's usually done wrong in practice - the <CODE>#ifdef</CODE>'s are 
in the file itself, not the file that includes it.<TT></TT>The result is often 
thousands of needless lines of code passing through the lexical analyzer, which 
is (in good compilers) the most expensive phase.
<P>Just follow the simple rule. </P></BODY></HTML>
