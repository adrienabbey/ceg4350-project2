1. Standard library routine descriptons:
    fopen: Opens the file of the given filename, returning a FILE stream 
        object; the access mode can be specified (read, write, etc.)
    fclose: Closes the specified FILE stream, writing any buffered changes 
        before doing so; this will return an integer based on success/error.
    fread: Reads the content of the given FILE stream, storing data read as an 
        array at the given pointer; the number of elements read and count can 
        be specified (updating the position of the stream), and will return an 
        integer of the total bytes successfully read.
    fwrite: Writes the content of the array at the given pointer to the 
        specified FILE stream; this works almost identically to fread, using 
        the size and count parameters (starting from the FILE's existing 
        position indicator), returning the number of bytes successfully 
        written.
    fstat: Provides statistics for the given file descriptor, storing the 
        results in the specified stat structure pointer (which is defined by 
        sys/stat.h).
    fscanf: Reads data from the specified FILE stream, storing them at the 
        specified pointer according to the format parameters given; returns 
        the number of bytes successfully read, setting indicators if an error 
        occurs.
    fprintf: Writes the specified string pointer to a file, formatting the 
        content as specified; returns the total number of characters written 
        if successful, or a negative value if an error occurs.
    sprintf: Works similarly to printf, storing a formatted string to the 
        given pointer location; returns the number of successfully written 
        characters, or a negative value on error.
2. List five other standard library routines, and five system calls:
    NOTE: The instructions state "list", NOT "describe"!
    Standard Library Routines: memcpy, memset, strcmp, strlen, fgets
    System Calls: open, read, write, close, creat
3. "statBuf.st_size == nSectorsPerDisk * nBytesPerSector" is used when 
    attempting to open a disk image; it verifies whether or not the existing 
    file has the expected file size, which is determined from the number of 
    sectors and bytes per sector.  The st_size is from the fstat standard 
    library routine.
4. Comments on five identifiers in the project's original code:
    fv: this is a public field of the Directory class, which points to that 
        directory's FileVolume.  If this was used only rarely, I'd not find 
        fault with it, but it's referenced 19 times in directory.cpp.  My main 
        issue is just how short and non-descript it is, as I saw it several 
        times glancing through the code and needed to lean on my IDE to show 
        me where it's defined in order to determine what it is.  I'd rather it 
        was something more explicit, like "fileVolume" or "parentVolume".
    SuperBlock: I like this idenitifier, as it's very clear as to what it is.  
        The class's public fields are also equally clear and concise, with 
        names like nTotalBlocks, nSecPerBlock, etc.  They're short enough to 
        not be awkward to work with, but concise enough that there's no 
        ambiguity as to what they represent.
    rdwrBlock: I have mixed feelings about this function name.  On one hand, 
        after looking at the function's code, it makes sense: it either reads 
        or writes a block.  On the other hand, the name isn't clear enough, as 
        "rdwr" isn't obvious enough to know from the name alone.  Ultimately, 
        this is a moot point, as this method is only called by the writeBlock 
        and readBlock methods immediately following.
    fbvBlocks, fbvInodes: These are very similar to my earlier comments 
        regarding fv: I had to lean on my IDE to find where these were defined 
        to discover that they are BitVectors that track free blocks and 
        inodes.  Each of these has only a few references throughout the 
        project, so a longer, more descript name would not be inappropriate.
    fs33types.hpp, sh33%, write433disk, and anything else with 33 in it: My 
        best guess is, 33 refers to the old class numbers (433/633).  I 
        suppose it made sense to include the numbers back in the day, but the 
        class number changed a long time ago.  This holds true for a lot of 
        the project documentation as well, where there's a lot of references 
        that never got updated (such as keeping home directories under 10 MB, 
        the old class numbers, project files ending in .c, etc.).